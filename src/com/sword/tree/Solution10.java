package com.sword.tree;

import java.util.Arrays;

/**
 * @author Eden.Chen
 *输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回
 */
public class Solution10 {
    public TreeNode reConstructBinaryTree(int [] pre,int [] in) {
    	if(pre.length==0||in.length ==0) {
    		return null;
    	}
    	//根节点
    	TreeNode tn = new TreeNode(pre[0]);
    	//查找中序遍历的根节点位置
    	for(int i= 0;i<in.length;i++) {
    		if(in[i] == pre[0]) {
    			//中序遍历的左右子树
    			int[] left = Arrays.copyOfRange(in, 0, i+1);
    			int[] right = Arrays.copyOfRange(in, i+1, in.length);
    			//递归构建二叉树左右子树
    			reConstructBinaryTree(Arrays.copyOfRange(pre, 1, i+1),left);
    			reConstructBinaryTree(Arrays.copyOfRange(pre, i+1, pre.length),right);
    			break;
    		}
    	}
    	return tn;
    }
}
